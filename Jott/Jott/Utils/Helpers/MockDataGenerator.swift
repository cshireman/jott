//
//  MockDataGenerator.swift
//  Jott
//
//  Created by Chris Shireman on 5/14/25.
//

import Foundation
import SwiftData

class MockDataGenerator {
    
    // MARK: - Create Mock Data in Context
    
    /// Creates a complete set of mock data in the given ModelContext
    static func createMockData(in context: ModelContext) {
        // Create categories first (some with parent-child relationships)
        let categories = createMockCategories(in: context)
        
        // Create tags
        let tags = createMockTags(in: context)
        
        // Create notes with references to categories and tags
        createMockNotes(in: context, with: categories, and: tags)
        
        // Save all changes
        try? context.save()
    }
    
    // MARK: - Categories
    
    /// Creates mock categories with hierarchical relationships
    /// Returns an array of all created categories
    static func createMockCategories(in context: ModelContext) -> [Category] {
        // Create parent categories
        let work = Category(name: "Work", iconName: "briefcase", colorHex: "#FF2D55", isDefault: true, sortOrder: 1)
        let personal = Category(name: "Personal", iconName: "person", colorHex: "#FF9500", isDefault: true, sortOrder: 2)
        let ideas = Category(name: "Ideas", iconName: "lightbulb", colorHex: "#5856D6", isDefault: true, sortOrder: 3)
        let inbox = Category(name: "Inbox", iconName: "tray", colorHex: "#007AFF", isDefault: true, sortOrder: 0)
        
        // Create child categories
        let projects = Category(name: "Projects", iconName: "folder", colorHex: "#FF3B30", sortOrder: 0)
        projects.parentCategory = work
        work.childCategories.append(projects)
        
        let meetings = Category(name: "Meetings", iconName: "person.2", colorHex: "#FF2D55", sortOrder: 1)
        meetings.parentCategory = work
        work.childCategories.append(meetings)
        
        let travel = Category(name: "Travel", iconName: "airplane", colorHex: "#AF52DE", sortOrder: 0)
        travel.parentCategory = personal
        personal.childCategories.append(travel)
        
        let health = Category(name: "Health", iconName: "heart", colorHex: "#FF2D55", sortOrder: 1)
        health.parentCategory = personal
        personal.childCategories.append(health)
        
        let appIdeas = Category(name: "App Ideas", iconName: "apps.iphone", colorHex: "#5AC8FA", sortOrder: 0)
        appIdeas.parentCategory = ideas
        ideas.childCategories.append(appIdeas)
        
        // Add third-level category
        let swift = Category(name: "Swift Projects", iconName: "swift", colorHex: "#FF9500", sortOrder: 0)
        swift.parentCategory = projects
        projects.childCategories.append(swift)
        
        // Insert all categories into the context
        let allCategories = [work, personal, ideas, inbox, projects, meetings, travel, health, appIdeas, swift]
        for category in allCategories {
            context.insert(category)
        }
        
        return allCategories
    }
    
    // MARK: - Tags
    
    /// Creates mock tags
    /// Returns an array of all created tags
    static func createMockTags(in context: ModelContext) -> [Tag] {
        let tagNames = [
            "important", "review", "idea", "todo", "urgent", 
            "followup", "research", "meeting", "project", "personal",
            "work", "tutorial", "reference", "schedule", "deadline",
            "draft", "final", "archive"
        ]
        
        let colors = [
            "#FF3B30", "#FF9500", "#FFCC00", "#4CD964", "#5AC8FA", 
            "#007AFF", "#5856D6", "#FF2D55", "#8E8E93", "#34C759"
        ]
        
        var tags: [Tag] = []
        
        for (index, name) in tagNames.enumerated() {
            let colorIndex = index % colors.count
            let isAuto = index % 3 == 0 // Make every third tag auto-generated
            
            let tag = Tag(
                name: name,
                colorHex: colors[colorIndex],
                usageCount: Int.random(in: 1...15),
                isAutoGenerated: isAuto,
                confidenceScore: isAuto ? Double.random(in: 0.65...0.95) : nil
            )
            
            context.insert(tag)
            tags.append(tag)
        }
        
        return tags
    }
    
    // MARK: - Notes
    
    /// Creates mock notes with references to categories and tags
    /// Returns an array of all created notes
    @discardableResult
    static func createMockNotes(
        in context: ModelContext,
        with categories: [Category],
        and tags: [Tag]
    ) -> [Note] {
        // Sample notes content
        let noteContents = [
            (
                "Meeting with Design Team",
                """
                Discussed the new design system for the app. Key points:
                - New color palette needs to be implemented
                - Typography system should be consistent
                - Need to schedule a follow-up meeting next week
                - Sarah will send the Figma files by EOD
                """
            ),
            (
                "Project Roadmap",
                """
                Q1 Goals:
                - Implement new authentication system
                - Refactor legacy code
                - Improve test coverage to 80%
                
                Q2 Goals:
                - Launch v2.0 of the app
                - Add analytics dashboard
                - Start work on iOS widget
                """
            ),
            (
                "Grocery List",
                """
                - Milk
                - Eggs
                - Bread
                - Apples
                - Chicken
                - Rice
                - Tomatoes
                - Pasta
                """
            ),
            (
                "Vacation Ideas",
                """
                Potential destinations for summer:
                1. Japan - Tokyo, Kyoto, Osaka
                2. Italy - Rome, Florence, Venice
                3. Greece - Athens, Santorini
                
                Need to check flight prices and accommodation options.
                """
            ),
            (
                "Book Recommendations",
                """
                Fiction:
                - "Project Hail Mary" by Andy Weir
                - "The Midnight Library" by Matt Haig
                
                Non-fiction:
                - "Atomic Habits" by James Clear
                - "Thinking, Fast and Slow" by Daniel Kahneman
                """
            ),
            (
                "Fitness Plan",
                """
                Weekly Schedule:
                - Monday: Upper body strength
                - Tuesday: Cardio (30 min)
                - Wednesday: Lower body strength
                - Thursday: Rest
                - Friday: Full body workout
                - Saturday: Cardio (45 min)
                - Sunday: Rest
                
                Goals:
                - Complete 10,000 steps daily
                - Drink at least 2L of water
                """
            ),
            (
                "App Idea: Smart Home Controller",
                """
                Features:
                - Voice control integration
                - Scene presets (morning, evening, movie night)
                - Energy usage tracking
                - Security camera integration
                - Temperature automation
                
                Tech stack:
                - SwiftUI for UI
                - HomeKit for device control
                - Core ML for user behavior patterns
                """
            ),
            (
                "Learning Swift: Notes",
                """
                Topics to review:
                - Concurrency with async/await
                - SwiftData fundamentals
                - Observation framework
                - Navigation API in SwiftUI
                - Macro implementation
                
                Resources:
                - Apple WWDC sessions
                - Swift documentation
                - Hacking with Swift website
                """
            ),
            (
                "Weekly Review: May 13",
                """
                Accomplishments:
                - Completed API integration for user authentication
                - Fixed 3 critical bugs in the payments module
                - Conducted code review for team members
                
                Next week's priorities:
                - Implement push notifications
                - Start work on offline mode
                - Prepare for next release testing
                """
            ),
            (
                "Birthday Gift Ideas",
                """
                For Mom:
                - Spa gift certificate
                - Cookbook from her favorite chef
                - Wireless headphones
                
                For Dad:
                - Golf accessories
                - New grill tools
                - Tech gadget (check wishlist)
                
                Need to order at least 2 weeks in advance.
                """
            )
        ]
        
        var notes: [Note] = []
        let dateFormatter = ISO8601DateFormatter()
        let now = Date()
        
        for (index, (title, content)) in noteContents.enumerated() {
            // Create date in the past, with more recent notes having higher indexes
            let daysAgo = Double(noteContents.count - index) * 2
            let createdDate = Calendar.current.date(byAdding: .day, value: -Int(daysAgo), to: now) ?? now
            let updatedDate = index % 3 == 0 
                ? createdDate // Some notes haven't been updated
                : Calendar.current.date(byAdding: .hour, value: -Int.random(in: 1...12), to: now) ?? now
            
            // Create the note
            let note = Note(
                title: title,
                content: content,
                createdAt: createdDate,
                updatedAt: updatedDate,
                isPinned: index < 2 // Pin the first two notes
            )
            
            // Assign a category
            if index < categories.count {
                note.category = categories[index]
            } else {
                // For remaining notes, assign a random category
                note.category = categories[Int.random(in: 0..<categories.count)]
            }
            
            // Assign 1-3 tags randomly
            let numTags = Int.random(in: 1...3)
            let shuffledTags = tags.shuffled()
            
            for i in 0..<min(numTags, shuffledTags.count) {
                note.tags.append(shuffledTags[i])
                shuffledTags[i].notes.append(note)
                
                // Increment usage count for the tag
                shuffledTags[i].usageCount += 1
            }
            
            // Add ML properties to some notes
            if index % 2 == 0 {
                note.summary = "Summary: " + content.split(separator: "\n").first!.description
                
                // Extract some keywords as entities
                let words = content.split(separator: " ")
                let keyWords = words.filter { $0.count > 5 }.prefix(5).map { String($0) }
                note.keyEntities = keyWords
            }
            
            context.insert(note)
            notes.append(note)
        }
        
        return notes
    }
    
    // MARK: - Utility Methods
    
    /// Creates a single mock note with specified category and tags
    static func createSingleMockNote(
        title: String,
        content: String,
        in context: ModelContext,
        category: Category? = nil,
        tags: [Tag] = []
    ) -> Note {
        let note = Note(
            title: title,
            content: content
        )
        
        if let category = category {
            note.category = category
        }
        
        for tag in tags {
            note.tags.append(tag)
            tag.notes.append(note)
            tag.usageCount += 1
        }
        
        context.insert(note)
        try? context.save()
        
        return note
    }
    
    /// Updates usageCounts for all tags based on note associations
    static func refreshTagUsageCounts(in context: ModelContext) {
        // Fetch all tags
        let tagDescriptor = FetchDescriptor<Tag>()
        guard let tags = try? context.fetch(tagDescriptor) else { return }
        
        // Update the usage count for each tag
        for tag in tags {
            tag.usageCount = tag.notes.count
        }
        
        try? context.save()
    }
}
